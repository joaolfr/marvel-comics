{"version":3,"sources":["features/counter/Counter.module.css","features/counter/counterAPI.js","features/counter/counterSlice.js","screens/login/styles.js","screens/login/index.js","theme/dark.js","App.js","app/store.js","index.js"],"names":["module","exports","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","Container","styled","div","props","theme","colors","primary","Login","style","color","primary_dark","primary_light","primary_sub","secondary","secondary_dark","secondary_light","secondary_sub","ligth","ligth_dark","ligth_light","ligth_sub","auxiliary","auxiliary_dark","auxiliary_light","auxiliary_sub","text","placeholder","white","App","useState","Dark","currentTheme","className","store","configureStore","reducer","counter","counterReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,IAAM,qBAAqB,MAAQ,uBAAuB,OAAS,wBAAwB,QAAU,yBAAyB,YAAc,qD,+ICAvJ,SAASC,IAAwB,IAAbC,EAAY,uDAAH,EAClC,OAAO,IAAIC,SAAQ,SAACC,GAAD,OACjBC,YAAW,kBAAMD,EAAQ,CAAEE,KAAMJ,MAAW,QCAhD,IAUaK,EAAiBC,YAC5B,qBAD4C,uCAE5C,WAAON,GAAP,eAAAO,EAAA,sEACyBR,EAAWC,GADpC,cACQQ,EADR,yBAGSA,EAASJ,MAHlB,2CAF4C,uDASjCK,EAAeC,YAAY,CACtCC,KAAM,UACNC,aArBmB,CACnBC,MAAO,EACPC,OAAQ,QAqBRC,SAAU,CACRC,UAAW,SAACC,GAKVA,EAAMJ,OAAS,GAEjBK,UAAW,SAACD,GACVA,EAAMJ,OAAS,GAGjBM,kBAAmB,SAACF,EAAOG,GACzBH,EAAMJ,OAASO,EAAOC,UAK1BC,cAAe,SAACC,GACdA,EACGC,QAAQnB,EAAeoB,SAAS,SAACR,GAChCA,EAAMH,OAAS,aAEhBU,QAAQnB,EAAeqB,WAAW,SAACT,EAAOG,GACzCH,EAAMH,OAAS,OACfG,EAAMJ,OAASO,EAAOC,c,EAK6BZ,EAAakB,QAgBzDlB,G,EAhBAO,U,EAAWE,U,EAAWC,kBAgBtBV,EAAf,S,mCCtEamB,EAAYC,IAAOC,IAAV,iFAEN,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAOC,WCQ/BC,EARD,WACZ,OACE,cAACP,EAAD,UACE,sBAAMQ,MAAO,CAAEC,MAAO,QAAtB,4BCiBSL,G,MAxBD,CACZC,OAAQ,CACNC,QAAS,UACTI,aAAc,UACdC,cAAe,UACfC,YAAa,UACbC,UAAW,UACXC,eAAgB,UAChBC,gBAAiB,UACjBC,cAAe,UACfC,MAAO,UACPC,WAAY,UACZC,YAAa,UACbC,UAAW,UACXC,UAAW,UACXC,eAAgB,UAChBC,gBAAiB,UACjBC,cAAe,UACfC,KAAM,UACNC,YAAa,UACbC,MAAO,UCDIC,MAZf,WAAgB,IAAD,EAC2BC,mBAASC,GADpC,mBACNC,EADM,KAEb,OAFa,KAGX,cAAC,IAAD,CAAe3B,MAAO2B,EAAtB,SACE,qBAAKC,UAAU,MAAf,SAEE,cAAC,EAAD,SCVKC,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAASC,KCCbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJQ,SAASC,eAAe,W","file":"static/js/main.0b2a73b8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__1C_4f\",\"value\":\"Counter_value__1d0te\",\"button\":\"Counter_button__1xpSV\",\"textbox\":\"Counter_textbox__3ODaX\",\"asyncButton\":\"Counter_asyncButton__2UAr3 Counter_button__1xpSV\"};","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  height: 100%;\n  background: ${(props) => props.theme.colors.primary};\n  width: 100%;\n`;\n","import React from \"react\";\n\nimport { Container } from \"./styles\";\n\nconst Login = () => {\n  return (\n    <Container>\n      <span style={{ color: \"#fff\" }}>testessssss</span>\n    </Container>\n  );\n};\n\nexport default Login;\n","const theme = {\n  colors: {\n    primary: \"#031138\",\n    primary_dark: \"#1E1A1A\",\n    primary_light: \"#2E2C2C\",\n    primary_sub: \"#D2D1D1\",\n    secondary: \"#1d1d1d\",\n    secondary_dark: \"#459A77\",\n    secondary_light: \"#A2D7C1\",\n    secondary_sub: \"#D0F5E6\",\n    ligth: \"#FFFFFF\",\n    ligth_dark: \"#EFEAEE\",\n    ligth_light: \"#FFFBFE\",\n    ligth_sub: \"#EAE8E8\",\n    auxiliary: \"#f2f2f2\",\n    auxiliary_dark: \"#3B6F86\",\n    auxiliary_light: \"#66A8C5\",\n    auxiliary_sub: \"#B6DBE1\",\n    text: \"#000000\",\n    placeholder: \"#efeaee\",\n    white: \"#FFF\",\n  },\n};\n\nexport default theme;\n","import React, { useState } from \"react\";\nimport { Counter } from \"./features/counter/Counter\";\nimport { Login } from \"./screens\";\nimport \"./App.css\";\nimport { ThemeProvider } from \"styled-components\";\nimport { Light, Dark } from \"./theme\";\n\nfunction App() {\n  const [currentTheme, setCurrentTheme] = useState(Dark);\n  return (\n    <ThemeProvider theme={currentTheme}>\n      <div className=\"App\">\n        {/* <Counter /> */}\n        <Login />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}